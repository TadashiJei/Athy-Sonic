openapi: 3.0.3
info:
  title: Athy S3-Compatible API
  description: >-
    S3-compatible REST API gateway for Athy decentralized storage. This starter
    spec covers core object operations and expanded S3 features. Authentication
    supports AWS Signature Version 4 (SigV4) and, optionally for development,
    an API key header.
  version: 0.1.0
servers:
  - url: http://localhost:3000
    description: Local development gateway
security:
  # Either SigV4 OR API key authentication is accepted
  - SigV4Auth: []
  - ApiKeyAuth: []
tags:
  - name: Buckets
    description: Bucket-level operations
  - name: Objects
    description: Object operations within buckets
  - name: Presign
    description: Gateway convenience endpoint to create pre-signed URLs
paths:
  "/{bucket}/{key}":
    parameters:
      - name: bucket
        in: path
        required: true
        schema:
          type: string
        description: Bucket name
      - name: key
        in: path
        required: true
        schema:
          type: string
        description: Object key (supports path-style keys)
      - name: uploads
        in: query
        required: false
        schema:
          type: boolean
        description: If true on POST, initiate multipart upload (S3-style `?uploads`)
      - name: uploadId
        in: query
        required: false
        schema:
          type: string
        description: Multipart upload ID (for upload part, complete, or abort)
      - name: partNumber
        in: query
        required: false
        schema:
          type: integer
          minimum: 1
        description: Part number for multipart upload
    put:
      tags: [Objects]
      summary: PutObject (upload)
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Object stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PutObjectResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
    get:
      tags: [Objects]
      summary: GetObject (download)
      responses:
        '200':
          description: Object data
          headers:
            ETag:
              schema:
                type: string
              description: Entity tag of the object
            Content-Type:
              schema:
                type: string
            Content-Length:
              schema:
                type: integer
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '404':
          description: Not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
    head:
      tags: [Objects]
      summary: HeadObject (metadata only)
      responses:
        '200':
          description: Metadata headers returned
          headers:
            ETag:
              schema:
                type: string
            Content-Type:
              schema:
                type: string
            Content-Length:
              schema:
                type: integer
        '404':
          description: Not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
    delete:
      tags: [Objects]
      summary: DeleteObject or AbortMultipartUpload
      description: >-
        Deletes the object if no `uploadId` is provided. If `uploadId` query
        parameter is present, aborts the multipart upload and discards all
        uploaded parts (S3-style abort).
      responses:
        '204':
          description: Deleted
        '404':
          description: Not found
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
    post:
      tags: [Objects]
      summary: Multipart operations (Create/Complete)
      description: >-
        If `?uploads` query param is present, initiates a multipart upload and
        returns an `uploadId`. If `uploadId` is present in query and the body
        contains the parts map, completes the multipart upload.
      requestBody:
        required: false
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CompleteMultipartUploadRequest'
      responses:
        '200':
          description: Result for create or complete multipart upload
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InitiateMultipartUploadResult'
                  - $ref: '#/components/schemas/CompleteMultipartUploadResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
    patch:
      tags: [Objects]
      summary: UploadPart (via PUT with query also supported)
      description: >-
        Alternative to S3-style `PUT` with `partNumber` and `uploadId` query
        parameters. This `PATCH` accepts the raw binary as the request body and
        stores it as a multipart part.
      parameters:
        - name: uploadId
          in: query
          required: true
          schema:
            type: string
        - name: partNumber
          in: query
          required: true
          schema:
            type: integer
            minimum: 1
      requestBody:
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Part stored
          headers:
            ETag:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadPartResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'
  "/{bucket}":
    parameters:
      - name: bucket
        in: path
        required: true
        schema:
          type: string
        description: Bucket name
    get:
      tags: [Buckets]
      summary: ListObjectsV2
      description: List objects within a bucket
      parameters:
        - name: prefix
          in: query
          required: false
          schema:
            type: string
        - name: continuation-token
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Listing result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListObjectsResult'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
  "/presign":
    post:
      tags: [Presign]
      summary: Create a pre-signed URL
      description: >-
        Convenience endpoint provided by the Athy gateway to create a
        pre-signed URL for common S3 operations (GET or PUT). In classic S3,
        presigning is a client-side operation; this endpoint mirrors that
        behavior for easier integration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresignRequest'
      responses:
        '200':
          description: Presigned URL details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresignResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/InternalError'
components:
  securitySchemes:
    SigV4Auth:
      type: apiKey
      in: header
      name: Authorization
      description: >-
        AWS Signature Version 4 authorization header (`Authorization`), used
        together with `x-amz-date` and `x-amz-content-sha256` headers. See
        https://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-api-key
  schemas:
    PutObjectResult:
      type: object
      properties:
        etag:
          type: string
        versionId:
          type: string
          nullable: true
        transactionHash:
          type: string
          description: On-chain transaction hash for metadata record
    ObjectSummary:
      type: object
      properties:
        key:
          type: string
        etag:
          type: string
        size:
          type: integer
        lastModified:
          type: string
          format: date-time
        contentType:
          type: string
    ListObjectsResult:
      type: object
      properties:
        bucket:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/ObjectSummary'
        isTruncated:
          type: boolean
        nextContinuationToken:
          type: string
          nullable: true
    InitiateMultipartUploadResult:
      type: object
      properties:
        uploadId:
          type: string
        bucket:
          type: string
        key:
          type: string
    UploadPartResult:
      type: object
      properties:
        etag:
          type: string
        partNumber:
          type: integer
    CompleteMultipartUploadRequest:
      type: object
      required: [parts]
      properties:
        parts:
          type: array
          items:
            type: object
            required: [partNumber, etag]
            properties:
              partNumber:
                type: integer
              etag:
                type: string
    CompleteMultipartUploadResult:
      type: object
      properties:
        etag:
          type: string
        versionId:
          type: string
          nullable: true
    PresignRequest:
      type: object
      required: [operation, bucket, key]
      properties:
        operation:
          type: string
          enum: [GET, PUT]
        bucket:
          type: string
        key:
          type: string
        contentType:
          type: string
          nullable: true
        expiresInSeconds:
          type: integer
          default: 900
          description: Expiration in seconds (default 15 minutes)
        headers:
          type: object
          additionalProperties:
            type: string
          description: Optional additional headers to include in signature
    PresignResponse:
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        headers:
          type: object
          additionalProperties:
            type: string
    ErrorResponse:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
        requestId:
          type: string
        details:
          type: object
          additionalProperties: true
    ProblemDetails:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
        instance:
          type: string
  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/ErrorResponse'
              - $ref: '#/components/schemas/ProblemDetails'
    Unauthorized:
      description: Authentication is required or has failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Forbidden:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    Conflict:
      description: Conflict with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
